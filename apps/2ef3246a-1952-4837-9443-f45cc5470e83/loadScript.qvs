///$tab Release Notes
//*******************Release Notes**********************//
//Version 1.0
//////////////////////////////////////////////////////////

///////////////
///Jira-Tickets****************************************//
rem DATA-6052;
rem Dev repris depuis Churn.qvw;
//****************************************************//



///$tab Main
SET ThousandSep=' ';
SET DecimalSep=',';
SET MoneyThousandSep=' ';
SET MoneyDecimalSep=',';
SET MoneyFormat='# ##0,00 €;-# ##0,00 €';
SET TimeFormat='hh:mm:ss';
SET DateFormat='DD/MM/YYYY';
SET TimestampFormat='DD/MM/YYYY hh:mm:ss[.fff]';
SET FirstWeekDay=0;
SET BrokenWeeks=0;
SET ReferenceDay=4;
SET FirstMonthOfYear=1;
SET CollationLocale='fr-FR';
SET CreateSearchIndexOnReload=1;
SET MonthNames='janv.;févr.;mars;avr.;mai;juin;juil.;août;sept.;oct.;nov.;déc.';
SET LongMonthNames='janvier;février;mars;avril;mai;juin;juillet;août;septembre;octobre;novembre;décembre';
SET DayNames='lun.;mar.;mer.;jeu.;ven.;sam.;dim.';
SET LongDayNames='lundi;mardi;mercredi;jeudi;vendredi;samedi;dimanche';
SET NumericalAbbreviation='3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:μ;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y';



 


///$tab ==Prefixing==
LET _QVD_root = 'lib://QVD from QV (de_app_qlview)';


LET _project='GC';
LET _prefixe = '$(_project)_CHURN';
LET _project_root = 'User Source (de_app_qlview)';
LET _QVD_root = 'lib://QVD from QV (de_app_qlview)';
LET _DWH_root = 'DWH (de_app_qlview)';



///$tab ==Special for project==
$(Must_Include='lib://$(_project_root)\param_0_ENV.txt');
///$tab ==Start Scripting==
call QTDE.Log('Start Scripting part');
///$tab ===MAPPINGS==

///$tab Client 
INLINE_TYPE_SEG_CLIENT:
LOAD trim(text(Segment))  as Segment
Inline [
Segment
Grand Compte
Client DEEE
];


$(_prefixe)_CLIENT_TMP:
LOAD
*
FROM [$(_QVD_root)\NEW_D_CLIENT.qvd]  (qvd)
where exists (Segment)
;


// $(_prefixe)_CLIENT:

// Left keep
// LOAD
// Distinct 
// AutoNumberHash128(trim(text([ID BP Principal])),trim(text(Segment)),trim(text([Energie client])))	as _Key_Qlik_Partner,
// Segment, 
// //[Segment (code)], 
// [Segment détail],
// [Service client],
// // [Energie client], 
// [Sous Service client]
// FROM [$(_QVD_root)\NEW_D_CLIENT.qvd] (qvd)
// where exists (Segment)
// ;

// call QTDE.LogRows('$(_prefixe)','$(_prefixe)_CLIENT', 'From QVD', 'NEW_D_CLIENT');



$(_prefixe)_CLIENT:
LOAD *,
AutoNumberHash128(trim(text([ID BP Principal])),trim(text(Segment)),trim(text([Energie client])))	as _Key_Qlik_Segment;
LOAD
Distinct 
if(isnull([ID BP Principal]) or [ID BP Principal]=' ',[ID BP Groupe],[ID BP Principal])
//,trim(text(Segment)),trim(text([Energie client]))
 	as [ID BP Principal],
[ID BP],
Segment,
[Energie client],
//[Segment (code)], 
[Segment détail],
[Service client],
[Sous Service client],
[Nom/RS1 client]         AS "Nom BP Principal"
RESIDENT $(_prefixe)_CLIENT_TMP
;

call QTDE.LogRows('$(_prefixe)','$(_prefixe)_CLIENT', 'From QVD', 'NEW_D_CLIENT');


MAPPING_SEG_DETAIL:
MAPPING LOAD 
distinct
_Key_Qlik_Segment,
[Segment détail]
RESIDENT $(_prefixe)_CLIENT;

//call QTDE.LogRows('$(_prefixe)','MAPPING_SEG_DETAIL', 'RESIDENT', '$(_prefixe)_CLIENT');


MAPPING_SC_DETAIL:
MAPPING LOAD 
distinct
_Key_Qlik_Segment,
[Service client]
RESIDENT $(_prefixe)_CLIENT;

//call QTDE.LogRows('$(_prefixe)','MAPPING_SC_DETAIL', 'RESIDENT', '$(_prefixe)_CLIENT');


MAPPING_SSC_DETAIL:
MAPPING LOAD 
distinct
_Key_Qlik_Segment,
[Sous Service client]
RESIDENT $(_prefixe)_CLIENT;

//call QTDE.LogRows('$(_prefixe)','MAPPING_SSC_DETAIL', 'RESIDENT', '$(_prefixe)_CLIENT');


MAPPING_CL_NAME_DETAIL:
MAPPING LOAD 
distinct
_Key_Qlik_Segment,
"Nom BP Principal"
RESIDENT $(_prefixe)_CLIENT;

//call QTDE.LogRows('$(_prefixe)','MAPPING_SSC_DETAIL', 'RESIDENT', '$(_prefixe)_CLIENT');
///$tab ==Dims

///$tab ==Facts

///$tab Date Settings
$(_prefixe)_Max_DATE_TMP:
LOAD
[Validité (mois)]				
FROM [$(_QVD_root)\NEW_F_CHURN.qvd] (qvd)
;


$(_prefixe)_Max_DATE:
LOAD 
max([Validité (mois)])			as [Validité (mois)]
Resident $(_prefixe)_Max_DATE_TMP
order by [Validité (mois)] asc;

//call QTDE.LogRows('$(_prefixe)','$(_prefixe)_Max_DATE', 'Resident', '$(_prefixe)_Max_DATE_TMP');



// LOAD
// max(fieldvalue('Validité (mois)',recno())) 				as [Validité (mois)]
// AutoGenerate FieldValueCount('Validité (mois)');

//LET vToday = Date(floor(Peek('Max_DATE_COMPTABLE',0,Max_DATE)),'YYYY-MM-DD');



Let vMaxMonth = Peek('Validité (mois)',-1,Max_DATE);

Let MyMessage =  'vMaxMonth value : '& '$(vMaxMonth)';
Trace $(MyMessage);



SET vControl_YearStart_TY = if(vMaxMonth > date(today(),'YYYY-MM'), date(YearStart(addmonths(today(),-1)),'YYYY-MM'),date(YearStart(AddMonths(vMaxMonth,-1)),'YYYY-MM'));
LET vControl_YearStart_TY =$(vControl_YearStart_TY);

SET vControl_YearStart_LY = if(vMaxMonth > date(today(),'YYYY-MM'), date(YearStart(addmonths(today(),-13)),'YYYY-MM'),date(YearStart(AddMonths(vMaxMonth,-13)),'YYYY-MM'));
LET vControl_YearStart_LY =$(vControl_YearStart_LY); 

SET vControl_YearEnd_TY =if(vMaxMonth > date(today(),'YYYY-MM') , date(addmonths(today(),-1) , 'YYYY-MM'),date(AddMonths(vMaxMonth,-1) , 'YYYY-MM'));
LET vControl_YearEnd_TY =$(vControl_YearEnd_TY); 

SET vControl_YearEnd_LY = if(vMaxMonth > date(today(),'YYYY-MM'), date(addmonths(today(),-13) , 'YYYY-MM'), date(AddMonths(vMaxMonth,-13) , 'YYYY-MM'));
LET vControl_YearEnd_LY =$(vControl_YearEnd_LY); 



///$tab Churn
INLINE_TYPE_SEG_PERIM:
LOAD trim(text("Segment (périmètre)"))  as "Segment (périmètre)"
Inline [
Segment (périmètre)
Grand Compte
Client DEEE
];



$(_prefixe)_CHURN_TMP:
LOAD *
FROM [$(_QVD_root)\NEW_F_CHURN.qvd]  (qvd)
where //match([Validité (mois)],'$(vMaxMonth)') and 
exists ([Segment (périmètre)]);


$(_prefixe)_CHURN:
LOAD
//AutoNumberHash128(trim(text([ID BP Principal])),[Validité (mois)]) 	 													as _Key_Qlik_Partner_Date,
AutoNumberHash128([Validité (mois)],trim(text([ID BP Principal])),[ID Installation],[ID Contrat]) 						as _Key_Qlik_Aggregate,
// AutoNumberHash128(trim(text([ID BP Principal]))//,trim(text([Segment (périmètre)])),trim(text([Energie (périmètre)])))as _Key_Qlik_Partner,
//AutoNumberHash128([ID BP Principal],[ID Installation]) 													AS _Key_Qlik_Install,
year([Validité (mois)]) 																								as [Validité (année)],
//[ID BP]&'|'&[Validité (mois)] 	 																						as Key_BP_Mois,
Applymap('MAPPING_SEG_DETAIL',AutoNumberHash128(trim(text([ID BP Principal])),trim(text([Segment (périmètre)])),trim(text([Energie (périmètre)])))
,'N/A') 			
as [Segment détail],
Applymap('MAPPING_SC_DETAIL',AutoNumberHash128(trim(text([ID BP Principal])),trim(text([Segment (périmètre)])),trim(text([Energie (périmètre)])))
//,trim(text([Segment (périmètre)])),trim(text([Energie (périmètre)]))
,'N/A') 			
as [Service client],
Applymap('MAPPING_SSC_DETAIL',AutoNumberHash128(trim(text([ID BP Principal])),trim(text([Segment (périmètre)])),trim(text([Energie (périmètre)])))
//,trim(text([Segment (périmètre)])),trim(text([Energie (périmètre)]))
,'N/A') 			
as [Sous Service client],
Applymap('MAPPING_CL_NAME_DETAIL',AutoNumberHash128(trim(text([ID BP Principal])),trim(text([Segment (périmètre)])),trim(text([Energie (périmètre)])))
//,trim(text([Segment (périmètre)])),trim(text([Energie (périmètre)]))
,'N/A') 			
as [Nom BP Principal],
*
;
LOAD
//	 [ID Compte contrat], 
     [ID BP], 
//     [ID BP Groupe],
     if(isnull([ID BP Principal]) or [ID BP Principal]=' ',[ID BP Groupe],[ID BP Principal]) as [ID BP Principal] ,
//      [Actif début mois (0/1)], 
     [Activation (0/1)],
  //--------------- champs de la table complémnet pour dédoubloner la table --------
//        [Initiateur résiliation],  
//        [Effet date (date)],
//        [Résiliation (date)], 
//        [Actif (date)],
//        [Ancienneté contract (Périmètre)],
//        [Ancienneté Contrat +-15j] ,
//        [Emménagement contrat (date)],
       // [Solde début mois], 
       //[Solde résiliation],
    
    
     [ID Installation], 
     [ID Contrat], 
     //[Validité (mois-année)],
     [Validité (mois)] ,
//      [Validité (annee)],
//     Société,
     [Segment (périmètre)],
     [Energie (périmètre)],
//      [Service client], 
//      [Sous Service client],
//     [Emménagement contrat (date)],
	 [Actif 01/01],
	 [Résiliation (0/1)]
//	 [Motif résiliation],
//	 [Type Emménagement],
// 	 [Démenagement (0/1)]
RESIDENT $(_prefixe)_CHURN_TMP
where //match([Validité (mois)],'$(vMaxMonth)') and 
//exists ([Segment (périmètre)])
//and
year( [Validité (mois)]) >= year(Today())- 2
;

call QTDE.LogRows('$(_prefixe)','$(_prefixe)_CHURN', 'From QVD', 'NEW_F_CHURN');












///$tab Churn Sorted
$(_prefixe)_CHURN_SORTED:
LOAD  
*,
//AutoNumberHash128(trim(text("ID BP Principal")),[Validité (mois)],[Validité (année)],[ID Installation],Société) as _key_Qlik_Churn_perdu,
//AutoNumberHash128(trim(text("ID BP Principal")),[Validité (année)],[ID Installation],Société) as _key_Qlik_Churn_repris,
if([ID Installation]=peek([ID Installation]) 
	and [Validité (année)]=peek([Validité (année)]) 
    	and [ID BP Principal]<>peek([ID BP Principal]),peek([ID BP Principal]),null()) 		as Ancien_groupe
resident $(_prefixe)_CHURN 
order by  [ID Installation] asc , [ID Contrat] asc ,[Validité (mois)] asc 
;

call QTDE.LogRows('$(_prefixe)','$(_prefixe)_CHURN_SORTED', 'Resident', '$(_prefixe)_CHURN_TMP');



left join ($(_prefixe)_CHURN_SORTED)
load  
//AutoNumberHash128(trim(text("ID BP Principal")),[Validité (année)],[ID Installation],Société) as _key_Qlik_Churn_repris,
	  [ID BP Principal] ,
      [Validité (année)],
      [ID Installation],
      //Société,
      Ancien_groupe As "Groupe précédent" ,
      1             As [Site repris] 
resident $(_prefixe)_CHURN_SORTED where not isnull(Ancien_groupe)
//and match([Validité (mois)],'$(vControl_YearEnd_TY)','$(vControl_YearEnd_LY)')
;

call QTDE.LogRows('$(_prefixe)','$(_prefixe)_CHURN_SORTED', 'Left Join', '$(_prefixe)_CHURN_SORTED');


Outer Join ($(_prefixe)_CHURN_SORTED)
load  
//AutoNumberHash128(trim(text("Groupe précédent")),[Validité (mois)],[Validité (année)],[ID Installation],Société) as _key_Qlik_Churn_perdu,
	  "Groupe précédent"   as [ID BP Principal] ,
      [Validité (mois)],
      [Validité (année)],
      [ID Installation],
      //Société,
	  1                    As [Site perdu] 
resident $(_prefixe)_CHURN_SORTED where not isnull("Groupe précédent")
//and match([Validité (mois)],'$(vControl_YearEnd_TY)','$(vControl_YearEnd_LY)')
;

call QTDE.LogRows('$(_prefixe)','$(_prefixe)_CHURN_SORTED', 'Left Join', '$(_prefixe)_CHURN_SORTED');



// LEFT join ($(_prefixe)_CHURN_SORTED )

// LOAD
// DISTINCT
// AutoNumberHash128([Validité (mois)],trim(text([ID BP Principal])),[ID Installation],[ID Contrat])	as _Key_Qlik_Aggregate,
// // [ID BP Principal],
// // [Validité (mois)],
// // [ID Installation],
// // [Résiliation (0/1)],
// // [ID Contrat],
// 1 as FL_SITE_NON_RESILIE
// RESIDENT $(_prefixe)_CHURN_SORTED 
// Where match([Résiliation (0/1)],0)
// and
// match([Validité (mois)],'$(vControl_YearEnd_TY)','$(vControl_YearEnd_LY)')
// order by [Validité (mois)] asc,[ID BP Principal] asc, [ID Installation] asc//,[ID Contrat] asc
// ;

// call QTDE.LogRows('$(_prefixe)','$(_prefixe)_CHURN_SORTED', 'Left Join', '$(_prefixe)_CHURN_SORTED');


// Right join (CHURN_SORTED)
// LOAD
// DISTINCT
// // AutoNumberHash128([Validité (mois)],trim(text([ID BP Principal])),[ID Installation],[ID Contrat]) 	as _Key_Qlik_Aggregate,
// [ID BP Principal],
// [Validité (mois)],
// [ID Installation],
// [Résiliation (0/1)],
// [ID Contrat],
// 1 as FL_SITE_NON_RESILIE
// RESIDENT CHURN_SORTED
// Where match([Résiliation (0/1)],0)
// and
// match([Validité (mois)],'$(vControl_YearEnd_TY)','$(vControl_YearEnd_LY)')
// order by [Validité (mois)] asc,[ID BP Principal] asc, [ID Installation] asc//,[ID Contrat] asc
// ;


// LEFT join ($(_prefixe)_CHURN_SORTED )
// LOAD
// DISTINCT
// AutoNumberHash128([Validité (mois)],trim(text([ID BP Principal])),[ID Installation],[ID Contrat]) as _Key_Qlik_Aggregate,
// // [ID BP Principal],
// // [Validité (mois)],
// // [ID Installation],
// // [Résiliation (0/1)],
// // [ID Contrat],
// 1 as FL_SITE_ACTIF
// RESIDENT $(_prefixe)_CHURN_SORTED 
// Where match([Actif 01/01],1) 
// and
// match([Validité (mois)],'$(vControl_YearStart_TY)','$(vControl_YearStart_LY)')
// order by [Validité (mois)] asc,[ID BP Principal] asc, [ID Installation] asc//,[ID Contrat] asc
// ;

// call QTDE.LogRows('$(_prefixe)','$(_prefixe)_CHURN_SORTED', 'Left Join', '$(_prefixe)_CHURN_SORTED');


///$tab Churn Aggregated
$(_prefixe)_CHURN_AGGR :
// RES
LOAD
[Validité (mois)],
"ID BP Principal",
[Nom BP Principal],
[Energie (périmètre)],
//[ID Installation],
[Segment (périmètre)],
[Segment détail],
[Service client],
[Sous Service client],
count(distinct [ID Installation]) as NB_SITE_NON_RESILIE
RESIDENT $(_prefixe)_CHURN_SORTED
Where match([Validité (mois)],'$(vControl_YearEnd_TY)','$(vControl_YearEnd_LY)')
and match([Résiliation (0/1)],0)
group by [Validité (mois)],
"ID BP Principal",
[Nom BP Principal],
[Energie (périmètre)],
//[ID Installation],
[Segment (périmètre)],
[Segment détail],
[Service client],
[Sous Service client];


Concatenate ($(_prefixe)_CHURN_AGGR)
// PER
LOAD
[Validité (mois)],
"ID BP Principal",
[Nom BP Principal],
[Energie (périmètre)],
//[ID Installation],
[Segment (périmètre)],
[Segment détail],
[Service client],
[Sous Service client],
sum([Site perdu]) as SM_SITE_PERDU,
sum([Site repris]) as SM_SITE_REPRIS
RESIDENT $(_prefixe)_CHURN_SORTED
Where match([Validité (mois)],'$(vControl_YearEnd_TY)','$(vControl_YearEnd_LY)')
group by [Validité (mois)],
"ID BP Principal",
[Nom BP Principal],
[Energie (périmètre)],
//[ID Installation],
[Segment (périmètre)],
[Segment détail],
[Service client],
[Sous Service client];



Concatenate ($(_prefixe)_CHURN_AGGR)
// ACT
LOAD
[Validité (mois)],
"ID BP Principal",
[Nom BP Principal],
[Energie (périmètre)],
//[ID Installation],
[Segment (périmètre)],
[Segment détail],
[Service client],
[Sous Service client],
count(distinct [ID Installation]) as NB_SITE_ACTIF
RESIDENT $(_prefixe)_CHURN_SORTED
Where match([Validité (mois)],'$(vControl_YearStart_TY)','$(vControl_YearStart_LY)')
and match([Actif 01/01],1)
group by [Validité (mois)],
"ID BP Principal",
[Nom BP Principal],
[Energie (périmètre)],
//[ID Installation],
[Segment (périmètre)],
[Segment détail],
[Service client],
[Sous Service client];



Concatenate ($(_prefixe)_CHURN_AGGR)
// PARC
LOAD
[Validité (mois)],
"ID BP Principal",
[Nom BP Principal],
[Energie (périmètre)],
//[ID Installation],
[Segment (périmètre)],
[Segment détail],
[Service client],
[Sous Service client],
count([ID Installation]) as NB_PARC
RESIDENT $(_prefixe)_CHURN_SORTED
Where //match([Validité (mois)],'$(vControl_YearStart_TY)','$(vControl_YearStart_LY)')
//and 
match([Résiliation (0/1)],0)
group by [Validité (mois)],
"ID BP Principal",
[Nom BP Principal],
[Energie (périmètre)],
//[ID Installation],
[Segment (périmètre)],
[Segment détail],
[Service client],
[Sous Service client];


call QTDE.LogRows('$(_prefixe)','$(_prefixe)_CHURN_SORTED', 'RESIDENT', '$(_prefixe)_CHURN_AGGR');




///$tab ==Calendar

///$tab Autocalendar
// Max_DATE:
// Load
// max(date#([Validité (mois)],'YYYY-MM')) as Max_DATE_COMPTABLE 
// resident CHURN_SORTED
// ;
// //num(max(fieldvalue('Date Comptable',recno()))) as Max_DATE_COMPTABLE
// //AutoGenerate FieldValueCount('Date Comptable');

// LET vToday = Date(floor(Peek('Max_DATE_COMPTABLE',0,Max_DATE)),'YYYY-MM-DD');


LET vToday = date(addmonths(today(),-1),'YYYY-MM-DD');



[autoCalendar]: 
  DECLARE FIELD DEFINITION Tagged ('$date')
PARAMETERS
      first_month_of_year = 1
FIELDS
  Dual(Year($1), YearStart($1)) AS [Year] Tagged ('$axis', '$year'),
  Dual('Q'&Num(Ceil(Num(Month($1))/3)),Num(Ceil(NUM(Month($1))/3),00)) AS [Quarter] Tagged ('$quarter', '$cyclic'),
  Dual(Year($1)&'-Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [YearQuarter] Tagged ('$yearquarter', '$qualified'),
  Dual('Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [_YearQuarter] Tagged ('$yearquarter', '$hidden', '$simplified'),
  Month($1) AS [Month] Tagged ('$month', '$cyclic'),
  Dual(Year($1)&'-'&Month($1), monthstart($1)) AS [YearMonth] Tagged ('$axis', '$yearmonth', '$qualified'),
  //Dual(Month($1), monthstart($1)) AS [_YearMonth] Tagged ('$axis', '$yearmonth', '$simplified', '$hidden'),
  Dual('W'&Num(Week($1),00), Num(Week($1),00)) AS [Week] Tagged ('$weeknumber', '$cyclic'),
  Dual(Year($1)&'-'&'W'&Num(Week($1),00), WeekStart($1)) AS [YearWeek] Tagged ('$axis', '$yearweek', '$qualified'),
  Date(Floor($1)) AS [Date] Tagged ('$axis', '$date', '$qualified'),
  //Date(Floor($1), 'D') AS [_Date] Tagged ('$axis', '$date', '$hidden', '$simplified'),
  If (DayNumberOfYear($1) <= DayNumberOfYear('$(vToday)'), 1, 0) AS [InYTD] ,
  Year('$(vToday)')-Year($1) AS [YearsAgo] ,
  If (DayNumberOfQuarter($1) <= DayNumberOfQuarter('$(vToday)'),1,0) AS [InQTD] ,
  4*Year('$(vToday)')+Ceil(Month('$(vToday)')/3)-4*Year($1)-Ceil(Month($1)/3) AS [QuartersAgo] ,
  Ceil(Month('$(vToday)')/3)-Ceil(Month($1)/3) AS [QuarterRelNo] ,
  If(Day($1)<=Day('$(vToday)'),1,0) AS [InMTD] ,
  12*Year('$(vToday)')+Month('$(vToday)')-12*Year($1)-Month($1) AS [MonthsAgo] ,
  Month('$(vToday)')-Month($1) AS [MonthRelNo] ,
  If(WeekDay($1)<=WeekDay('$(vToday)'),1,0) AS [InWTD] ,
  (WeekStart('$(vToday)')-WeekStart($1))/7 AS [WeeksAgo] ,
  Week('$(vToday)')-Week($1) AS [WeekRelNo] ;
  
DERIVE FIELDS FROM FIELDS 
"Validité (mois)"
USING [autoCalendar] ;



///$tab ==Drop Tables & Fields==
Drop tables $(_prefixe)_CHURN_TMP,$(_prefixe)_CHURN, $(_prefixe)_CHURN_SORTED,
INLINE_TYPE_SEG_PERIM,INLINE_TYPE_SEG_CLIENT ,
$(_prefixe)_Max_DATE_TMP,
$(_prefixe)_CLIENT,$(_prefixe)_CLIENT_TMP;

// Drop fields 
// [ID BP] 
// from $(_prefixe)_CHURN_SORTED;
///$tab ==End Scripting ==
call QTDE.Log('End Scripting part');

If not WildMatch('$(_env)','DEV') then 

Drop Tables
$(_prefixe)_logs_rows,
$(_prefixe)_logs
;

Exit script;

else

Exit script;
///$tab ==DEPRECATED==

///$tab Montants
$(_prefixe)_Montants:

LOAD
Key_BP_Mois,	 													
"Montant résilié"
//     "Montant Résiliation (+ 3 mois)",
//     "Montant Résiliation (+ 6 mois)"
FROM [$(_QVD_root)\MONTANTS_ECHUS_3M_6M.qvd](qvd) 
where exists(Key_BP_Mois)
;

call QTDE.LogRows('$(_prefixe)','$(_prefixe)_Montants', 'From QVD', 'MONTANTS_ECHUS_3M_6M');
///$tab Variable
rem Churn Global;
//***************************************************************************************************************/
SET vCHURN_RESIL_TY = 
'rangemax(
count(distinct {< [Validité (mois)] ={"$(vControl_YearStart_TY)"} ,FL_SITE_ACTIF={1}>} [ID Installation])
-count( distinct {<[Validité (mois)] ={"$(vControl_YearEnd_TY)"} ,FL_SITE_NON_RESILIE={1}>} [ID Installation])
+sum( {< [Validité (mois)] ={"$(vControl_YearEnd_TY)"}>} FL_SITE_REPRIS)
-sum( {< [Validité (mois)] ={"$(vControl_YearEnd_TY)"}>} FL_SITE_PERDU )
,0)';

LET vCHURN_RESIL_TY =$(vCHURN_RESIL_TY);


SET vCHURN_RESIL_LY = 
'rangemax(
count( distinct {< [Validité (mois)] ={"$(vControl_YearStart_LY)"} ,FL_SITE_ACTIF={1}>} [ID Installation])
-count( distinct {<[Validité (mois)] ={"$(vControl_YearEnd_LY)"} ,FL_SITE_NON_RESILIE={1}>} [ID Installation])
+sum( {< [Validité (mois)] ={"$(vControl_YearEnd_LY)"}>} FL_SITE_REPRIS)
-sum( {< [Validité (mois)] ={"$(vControl_YearEnd_LY)"}>} FL_SITE_PERDU )
,0)';
LET vCHURN_RESIL_LY =$(vCHURN_RESIL_LY);



exit script;



rem Churn Collectivité;
//***************************************************************************************************************/


SET vCHURN_RESIL_Col_TY = rangemax(
count( distinct {< [Validité (mois)] ={'$(vControl_YearStart_TY)'} ,FL_SITE_ACTIF={1}, [Segment détail]={'Grands Comptes - Collectivités'}>} [ID Installation])
-count( distinct {<[Validité (mois)] ={'$(vControl_YearEnd_TY)'} ,FL_SITE_NON_RESILIE={1}, [Segment détail]={'Grands Comptes - Collectivités'}>} [ID Installation])
+sum( {< [Validité (mois)] ={'$(vControl_YearEnd_TY)'}, [Segment détail]={'Grands Comptes - Collectivités'}>} FL_SITE_REPRIS)
-sum( {< [Validité (mois)] ={'$(vControl_YearEnd_TY)'}, [Segment détail]={'Grands Comptes - Collectivités'}>} FL_SITE_PERDU )
,0);
LET vCHURN_RESIL_Col_TY =$(vCHURN_RESIL_Col_TY);


SET vCHURN_RESIL_Col_LY = 
rangemax(
count( distinct {< [Validité (mois)] ={'$(vControl_YearStart_LY)'} ,FL_SITE_ACTIF={1}, [Segment détail]={'Grands Comptes - Collectivités'}>} [ID Installation])
-count( distinct {<[Validité (mois)] ={'$(vControl_YearEnd_LY)'} ,FL_SITE_NON_RESILIE={1}, [Segment détail]={'Grands Comptes - Collectivités'}>} [ID Installation])
+sum( {< [Validité (mois)] ={'$(vControl_YearEnd_LY)'}, [Segment détail]={'Grands Comptes - Collectivités'}>} FL_SITE_REPRIS)
-sum( {< [Validité (mois)] ={'$(vControl_YearEnd_LY)'}, [Segment détail]={'Grands Comptes - Collectivités'}>} FL_SITE_PERDU )
,0);
LET vCHURN_RESIL_Col_LY =$(vCHURN_RESIL_Col_TY);








rem Churn Entreprise;
//***************************************************************************************************************/


SET vCHURN_RESIL_Ent_TY = 
rangemax(
count( distinct {< [Validité (mois)] ={'$(vControl_YearStart_TY)'} ,FL_SITE_ACTIF={1},[Segment détail]={'Grands Comptes - Entreprises'}>} [ID Installation])
-count( distinct {<[Validité (mois)] ={'$(vControl_YearEnd_TY)'} ,FL_SITE_NON_RESILIE={1},[Segment détail]={'Grands Comptes - Entreprises'}>} [ID Installation])
+sum( {< [Validité (mois)] ={'$(vControl_YearEnd_TY)'},[Segment détail]={'Grands Comptes - Entreprises'}>} FL_SITE_REPRIS)
-sum( {< [Validité (mois)] ={'$(vControl_YearEnd_TY)'},[Segment détail]={'Grands Comptes - Entreprises'}>} FL_SITE_PERDU )
,0);
LET vCHURN_RESIL_Ent_TY =$(vCHURN_RESIL_Ent_TY);


SET vCHURN_RESIL_Ent_LY = 
rangemax(
count( distinct {< [Validité (mois)] ={'$(vControl_YearStart_LY)'} ,FL_SITE_ACTIF={1},[Segment détail]={'Grands Comptes - Entreprises'}>} [ID Installation])
-count( distinct {<[Validité (mois)] ={'$(vControl_YearEnd_LY)'} ,FL_SITE_NON_RESILIE={1},[Segment détail]={'Grands Comptes - Entreprises'}>} [ID Installation])
+sum( {< [Validité (mois)] ={'$(vControl_YearEnd_LY)'}, [Segment détail]={'Grands Comptes - Entreprises'}>} FL_SITE_REPRIS)
-sum( {< [Validité (mois)] ={'$(vControl_YearEnd_LY)'},[Segment détail]={'Grands Comptes - Entreprises'}>} FL_SITE_PERDU )
,0);
LET vCHURN_RESIL_Ent_LY =$(vCHURN_RESIL_Ent_LY);
